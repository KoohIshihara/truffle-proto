util-header
  div.wrap-util
    div(if="{status == 'normal'}").container.f.fm.flex-between
      //a.wrap-img.f.fh
        img(src='{iconSrc}')
      //a(onclick='{toPost}').wrap-img.f.fh
        img(src='{postSrc}')
    div(if="{status == 'back'}").container.f.fm.flex-between
      a(onclick='{toBack}').wrap-img.f.fh
        img(src='{backSrc}')
    div(if="{status == 'add_profile'}").container.f.fm.flex-between
      a(onclick='{toBack}').wrap-img.f.fh
        img(src='{backSrc}')
      a.mr10.f.fh
        p(onclick='{saveProfile}').cta#profileSaveButton Save
    div.wrap-text
      p {opts.label}



  style(scoped, type='less').
    :scope {
      position: fixed;
      z-index: 101;
      top: 0;
      left: 0;
      width: 100%;
      height: 48px;
      border-bottom: solid 0.6px rgba(0,0,0,0.2);
      background: #fff;
      /*filter: drop-shadow(1px 1px 1px rgba(0,0,0,0.6));*/
      .wrap-util {
        position: relative;
        width: 100%;
        height: 100%;
        .container {
          padding: 0px 4px;
          height: 100%;
          .wrap-img {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            overflow: hidden;
            img {
              height: 100%;
              object-fit: cover;
            }
          }
          .cta {
            color: #999;
            font-weight: bold;
            pointer-events: none;
          }
          .cta-active {
            color: #03A9F4;
            pointer-events: auto;
          }
        }
        .wrap-text {
          position: absolute;
          top: 14px;
          left: 0;
          width: 100%;
          pointer-events: none;
          p {
            width: 100%;
            color: #2a2a2a;
            text-align: center;
          }
        }
      }
    }

  script.

    var self = this;

    this.status = opts.status;

    console.log(this.status);
    this.on('mount', function(){
      if('user' in session){

        // normal
        this.backSrc = './img/icon/back.svg';
        this.toBack = function() {
          window.history.back();
        }

        // add_profile
        this.saveProfile = function() {
          console.log('save profile');
          var value = document.getElementById('profileInput').value;
          var profile = riot.profileContentToEdit;
          var profileObj = {
            categoryId: profile.categoryId,
            label: profile.label,
            from: session.user.uid,
            to: profile.to,
            content: value,
          };
          service.db.collection("profiles").set(profileObj);
        }

      } // if('user' in session)
    });
    

    /*
    switch (opts.status){
      case 'normal':
        this.leftIconSrc = '';
        this.rightIconSrc = '';
      break;

      case 'modal':

      break;
    }
    */